#!/bin/bash

# Configuration
SECRET_PATH="secret/data/uberbase"
VAULT_PREFIXES=("UBERBASE_" ${UBERBASE_VAULT_PREFIXES:-})

VAULT_CACERT=/vault/ca/ca.pem

echo -n "Starting Vault..."

# Add this function near the top of the file, after the configuration variables
wait_for_vault_unseal() {
    while true; do
        seal_status=$(podman exec \
            --env VAULT_ADDR=https://127.0.0.1:${UBERBASE_VAULT_PORT} \
            --env VAULT_CACERT=${VAULT_CACERT} \
            vault \
            vault status -format=json 2>/dev/null | jq -r '.sealed')
        
        if [ "$seal_status" = "false" ]; then
            break
        fi
        sleep 1
    done
}

# Pull vault image
podman pull docker.io/hashicorp/vault:latest > /dev/null 2>&1

# If vault isn't running, start it
vault_status=$(podman exec --env VAULT_CACERT=${VAULT_CACERT} vault vault status 2>&1)
if [ $? -ne 0 ]; then
    if ! podman volume inspect vault_data > /dev/null 2>&1; then
        podman volume create vault_data > /dev/null 2>&1
        podman run --rm --user vault -v vault_data:/opt/data/vault:Z --entrypoint="/bin/sh" docker.io/hashicorp/vault:latest -c "mkdir -p /opt/data/vault/raft"
    fi
    podman run \
        -d \
        --user vault \
        --replace \
        --name vault \
        --env-file .env \
        --env VAULT_CACERT=${VAULT_CACERT} \
        --cap-add IPC_LOCK \
        --cap-add CAP_SETFCAP \
        -v vault_data:/opt/data/vault:Z \
        -v ${PWD}/_configs/vault:/vault/config:z \
        -v ${UBERBASE_VAULT_STORAGE}/certs:/vault/certs:z \
        -v ./data/certs:/vault/ca:z \
        --network host \
        --add-host uberbase:0.0.0.0 \
        docker.io/hashicorp/vault:latest \
        vault server -config=/vault/config/vault-server.hcl > /dev/null 2>&1
fi

sleep 2

# Initialize Vault if needed
if [ ! -f ${UBERBASE_VAULT_STORAGE}/keys.json ]; then
    podman exec \
        --env VAULT_ADDR=https://${UBERBASE_VAULT_HOST}:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault operator init \
        -key-shares=1 \
        -key-threshold=1 \
        -format=json > ${UBERBASE_VAULT_STORAGE}/keys.json

    # Unseal and login
    UNSEAL_KEY=$(cat ${UBERBASE_VAULT_STORAGE}/keys.json | jq -r ".unseal_keys_b64[0]")
    ROOT_TOKEN=$(cat ${UBERBASE_VAULT_STORAGE}/keys.json | jq -r ".root_token")
   
    podman exec \
        --env VAULT_ADDR=https://${UBERBASE_VAULT_HOST}:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault operator unseal $UNSEAL_KEY > /dev/null 2>&1

    # Add wait after initial unseal
    wait_for_vault_unseal

    podman exec \
        --env VAULT_ADDR=https://${UBERBASE_VAULT_HOST}:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault login $ROOT_TOKEN > /dev/null 2>&1

    # Enable secret engines
    podman exec \
        --env VAULT_ADDR=https://${UBERBASE_VAULT_HOST}:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault secrets enable -path=secret kv-v2 > /dev/null 2>&1

    # Create single policy for all services
    cat > "${PWD}/_configs/vault/service-policy.hcl" <<EOF
path "${SECRET_PATH}/*" {
    capabilities = ["read"]
}
EOF
    
    podman exec \
        --env VAULT_ADDR=https://${UBERBASE_VAULT_HOST}:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault policy write service-policy /vault/config/service-policy.hcl > /dev/null 2>&1

    # Enable AppRole auth
    podman exec \
        --env VAULT_ADDR=https://${UBERBASE_VAULT_HOST}:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault auth enable approle > /dev/null 2>&1

    # Create single role for all services
    podman exec \
        --env VAULT_ADDR=https://${UBERBASE_VAULT_HOST}:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault write auth/approle/role/service \
        secret_id_ttl=0 \
        token_num_uses=0 \
        token_ttl=20m \
        token_max_ttl=30m \
        policies="service-policy" > /dev/null 2>&1

    # Store all matching environment variables
    
    # Create a JSON object from environment variables
    json_data="{"
    first=true
    
    for prefix in "${VAULT_PREFIXES[@]}"; do
        while IFS='=' read -r key value; do
            # Skip empty lines or empty values
            [ -z "$key" ] || [ -z "$value" ] && continue
            
            # Add comma if not first entry
            if [ "$first" = true ]; then
                first=false
            else
                json_data+=","
            fi
            
            # remove leading 'export'
            key=$(echo "$key" | sed 's/^export //')
            # Convert env var name to lowercase for secret path
            secret_key=$(echo "$key" | tr '[:upper:]' '[:lower:]')
            # Properly escape the value for JSON
            escaped_value=$(printf '%s' "$value" | jq -R .)
            json_data+="\"$secret_key\":$escaped_value"
        done < <(env | grep "^${prefix}")
    done
    
    json_data+="}"

    # Write JSON to config directory (which is mounted in the container)
    echo "$json_data" > "${PWD}/_configs/vault/secrets.json"

    podman exec \
        --env VAULT_ADDR=https://${UBERBASE_VAULT_HOST}:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault kv put "secret/uberbase/config" @/vault/config/secrets.json > /dev/null 2>&1

    # Clean up
    rm "${PWD}/_configs/vault/secrets.json"

    # Generate and store service credentials
    ROLE_ID=$(podman exec \
        --env VAULT_ADDR=https://${UBERBASE_VAULT_HOST}:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault read -field=role_id auth/approle/role/service/role-id)
    SECRET_ID=$(podman exec \
        --env VAULT_ADDR=https://${UBERBASE_VAULT_HOST}:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault write -f -field=secret_id auth/approle/role/service/secret-id)
    
    echo "VAULT_ROLE_ID=$ROLE_ID" > ${UBERBASE_VAULT_STORAGE}/credentials
    echo "VAULT_SECRET_ID=$SECRET_ID" >> ${UBERBASE_VAULT_STORAGE}/credentials

else
    UNSEAL_KEY=$(cat ${UBERBASE_VAULT_STORAGE}/keys.json | jq -r ".unseal_keys_b64[0]")
    podman exec \
        --env VAULT_ADDR=https://${UBERBASE_VAULT_HOST}:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault operator unseal $UNSEAL_KEY > /dev/null 2>&1

    # Wait for vault in steady state boot
    wait_for_vault_unseal

    # Login with root token for secret updates
    ROOT_TOKEN=$(cat ${UBERBASE_VAULT_STORAGE}/keys.json | jq -r ".root_token")
    podman exec \
        --env VAULT_ADDR=https://${UBERBASE_VAULT_HOST}:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault login $ROOT_TOKEN > /dev/null 2>&1

    # Update secrets from current environment variables
    
    # Create a JSON object from environment variables
    json_data="{"
    first=true
    
    for prefix in "${VAULT_PREFIXES[@]}"; do
        while IFS='=' read -r key value; do
            # Skip empty lines or empty values
            [ -z "$key" ] || [ -z "$value" ] && continue
            
            # Add comma if not first entry
            if [ "$first" = true ]; then
                first=false
            else
                json_data+=","
            fi
            
            # remove leading 'export'
            key=$(echo "$key" | sed 's/^export //')
            # Convert env var name to lowercase for secret path
            secret_key=$(echo "$key" | tr '[:upper:]' '[:lower:]')
            # Properly escape the value for JSON
            escaped_value=$(printf '%s' "$value" | jq -R .)
            json_data+="\"$secret_key\":$escaped_value"
        done < <(env | grep "^${prefix}")
    done
    
    json_data+="}"

    # Write JSON to config directory
    echo "$json_data" > "${PWD}/_configs/vault/secrets.json"

    podman exec \
        --env VAULT_ADDR=https://${UBERBASE_VAULT_HOST}:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault kv put "secret/uberbase/config" @/vault/config/secrets.json > /dev/null 2>&1

    # Clean up
    rm "${PWD}/_configs/vault/secrets.json"
fi 

echo -e " \033[1;32mdone.\033[0m"
