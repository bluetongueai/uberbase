#!/bin/bash

#set -x

# Configuration
SECRET_PATH="secret/data/uberbase"
VAULT_PREFIXES=("UBERBASE_" ${UBERBASE_VAULT_PREFIXES:-})

# If we don't have keys, we need to create them
if ! [ -d ${UBERBASE_VAULT_STORAGE}/keys ]; then
    mkdir -p ${UBERBASE_VAULT_STORAGE}/keys
    echo "Creating CA..."
    # Generate CA private key
    openssl ecparam -out ${UBERBASE_VAULT_STORAGE}/keys/vault-ca-key.pem -name prime256v1 -genkey -noout
    
    # Create CA certificate with proper extensions
    openssl req -x509 -new -sha256 \
        -key ${UBERBASE_VAULT_STORAGE}/keys/vault-ca-key.pem \
        -out ${UBERBASE_VAULT_STORAGE}/keys/vault-ca.pem \
        -days 365 \
        -subj "/CN=uberbase-vault-ca" \
        -extensions v3_ca \
        -config <(echo "[req]"; \
                 echo "distinguished_name=req"; \
                 echo "[v3_ca]"; \
                 echo "basicConstraints=critical,CA:TRUE"; \
                 echo "keyUsage=critical,digitalSignature,keyCertSign,cRLSign"; \
                 echo "subjectKeyIdentifier=hash"; \
                 echo "subjectAltName=DNS:uberbase-vault-ca,IP:127.0.0.1")

    echo "Creating server certificate..."
    # Generate server private key
    openssl ecparam -out ${UBERBASE_VAULT_STORAGE}/keys/vault-key.pem -name prime256v1 -genkey -noout
    
    # Create and sign server certificate with proper extensions
    openssl req -new -sha256 \
        -key ${UBERBASE_VAULT_STORAGE}/keys/vault-key.pem \
        -subj "/CN=uberbase-vault" \
        -out ${UBERBASE_VAULT_STORAGE}/keys/vault.csr

    openssl x509 -req -sha256 \
        -in ${UBERBASE_VAULT_STORAGE}/keys/vault.csr \
        -CA ${UBERBASE_VAULT_STORAGE}/keys/vault-ca.pem \
        -CAkey ${UBERBASE_VAULT_STORAGE}/keys/vault-ca-key.pem \
        -CAcreateserial \
        -out ${UBERBASE_VAULT_STORAGE}/keys/vault-cert.pem \
        -days 365 \
        -extfile <(echo "subjectAltName=DNS:uberbase-vault,IP:127.0.0.1"; \
                   echo "keyUsage=critical,digitalSignature,keyEncipherment"; \
                   echo "extendedKeyUsage=serverAuth")

    echo "Setting permissions..."
    sudo chown root:root ${UBERBASE_VAULT_STORAGE}/keys/vault-ca.pem ${UBERBASE_VAULT_STORAGE}/keys/vault-cert.pem
    sudo chown root:vault ${UBERBASE_VAULT_STORAGE}/keys/vault-key.pem
    sudo chmod 0644 ${UBERBASE_VAULT_STORAGE}/keys/vault-cert.pem ${UBERBASE_VAULT_STORAGE}/keys/vault-ca.pem
    sudo chmod 0644 ${UBERBASE_VAULT_STORAGE}/keys/vault-key.pem
fi

VAULT_CACERT=/vault/keys/vault-ca.pem

# If vault isn't running, start it
vault_status=$(podman exec --env VAULT_CACERT=${VAULT_CACERT} vault vault status 2>&1)
if [ $? -ne 0 ]; then
    if ! podman volume inspect vault_data > /dev/null 2>&1; then
        echo "Creating vault data volume..."
        podman volume create vault_data
        echo "Creating vault raft directory..."
        podman run --rm --user vault -v vault_data:/opt/data/vault:Z --entrypoint="/bin/sh" docker.io/hashicorp/vault:latest -c "mkdir -p /opt/data/vault/raft"
    fi
    echo "Starting Vault..."
    podman run \
        -d \
        --user vault \
        --replace \
        --name vault \
        --env-file .env \
        --env VAULT_CACERT=${VAULT_CACERT} \
        --cap-add IPC_LOCK \
        --cap-add CAP_SETFCAP \
        -v vault_data:/opt/data/vault:Z \
        -v ${PWD}/_configs/vault:/vault/config:z \
        -v ${UBERBASE_VAULT_STORAGE}/keys:/vault/keys:z \
        -p ${UBERBASE_VAULT_PORT}:8200 \
        docker.io/hashicorp/vault:latest \
        vault server -config=/vault/config/vault-server.hcl
fi

# Wait for vault to start
sleep 2

# Initialize Vault if needed
if [ ! -f ${UBERBASE_VAULT_STORAGE}/keys.json ]; then
    echo "Initializing Vault..."
    podman exec \
        --env VAULT_ADDR=https://127.0.0.1:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault operator init \
        -key-shares=1 \
        -key-threshold=1 \
        -format=json > ${UBERBASE_VAULT_STORAGE}/keys.json

    # Unseal and login
    UNSEAL_KEY=$(cat ${UBERBASE_VAULT_STORAGE}/keys.json | jq -r ".unseal_keys_b64[0]")
    ROOT_TOKEN=$(cat ${UBERBASE_VAULT_STORAGE}/keys.json | jq -r ".root_token")
   

    # Unseal and login
    UNSEAL_KEY=$(cat ${UBERBASE_VAULT_STORAGE}/keys.json | jq -r ".unseal_keys_b64[0]")
    ROOT_TOKEN=$(cat ${UBERBASE_VAULT_STORAGE}/keys.json | jq -r ".root_token")

    echo "UNSEAL_KEY: $UNSEAL_KEY"
    echo "ROOT_TOKEN: $ROOT_TOKEN"
    
    echo "Unsealing Vault..."
    podman exec \
        --env VAULT_ADDR=https://127.0.0.1:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault operator unseal $UNSEAL_KEY

    echo "Logging in to Vault..."
    podman exec \
        --env VAULT_ADDR=https://127.0.0.1:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault login $ROOT_TOKEN

    # Enable secret engines
    echo "Enabling secret engines..."
    podman exec \
        --env VAULT_ADDR=https://127.0.0.1:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault secrets enable -path=secret kv-v2

    # Create single policy for all services
    echo "Creating service policy..."
    cat > "${PWD}/_configs/vault/service-policy.hcl" <<EOF
path "${SECRET_PATH}/*" {
    capabilities = ["read"]
}
EOF
    
    podman exec \
        --env VAULT_ADDR=https://127.0.0.1:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault policy write service-policy /vault/config/service-policy.hcl

    # Enable AppRole auth
    echo "Enabling AppRole authentication..."
    podman exec \
        --env VAULT_ADDR=https://127.0.0.1:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault auth enable approle

    # Create single role for all services
    echo "Creating service role..."
    podman exec \
        --env VAULT_ADDR=https://127.0.0.1:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault write auth/approle/role/service \
        secret_id_ttl=0 \
        token_num_uses=0 \
        token_ttl=20m \
        token_max_ttl=30m \
        policies="service-policy"

    # Store all matching environment variables
    echo "Storing environment variables..."
    
    # Create a JSON object from environment variables
    json_data="{"
    first=true
    
    for prefix in "${VAULT_PREFIXES[@]}"; do
        while IFS='=' read -r key value; do
            # Skip empty lines
            [ -z "$key" ] && continue
            
            # Add comma if not first entry
            if [ "$first" = true ]; then
                first=false
            else
                json_data+=","
            fi
            
            # Convert env var name to lowercase for secret path
            secret_key=$(echo "$key" | tr '[:upper:]' '[:lower:]')
            # Properly escape the value for JSON
            escaped_value=$(printf '%s' "$value" | jq -R .)
            json_data+="\"$secret_key\":$escaped_value"
        done < <(env | grep "^${prefix}")
    done
    
    json_data+="}"

    # Write JSON to config directory (which is mounted in the container)
    echo "$json_data" > "${PWD}/_configs/vault/secrets.json"

    # Store secrets in Vault using the mounted file
    podman exec \
        --env VAULT_ADDR=https://127.0.0.1:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault kv put "$SECRET_PATH/config" "data=@/vault/config/secrets.json"

    # Clean up
    rm "${PWD}/_configs/vault/secrets.json"

    # Generate and store service credentials
    echo "Generating service credentials..."
    ROLE_ID=$(podman exec \
        --env VAULT_ADDR=https://127.0.0.1:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault read -field=role_id auth/approle/role/service/role-id)
    SECRET_ID=$(podman exec \
        --env VAULT_ADDR=https://127.0.0.1:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault write -f -field=secret_id auth/approle/role/service/secret-id)
    
    # Store credentials where services can find them
    echo "VAULT_ROLE_ID=$ROLE_ID" > ${UBERBASE_VAULT_STORAGE}/credentials
    echo "VAULT_SECRET_ID=$SECRET_ID" >> ${UBERBASE_VAULT_STORAGE}/credentials

else
    echo "Unsealing existing Vault..."
    UNSEAL_KEY=$(cat ${UBERBASE_VAULT_STORAGE}/keys.json | jq -r ".unseal_keys_b64[0]")
    podman exec \
        --env VAULT_ADDR=https://127.0.0.1:${UBERBASE_VAULT_PORT} \
        --env VAULT_CACERT=${VAULT_CACERT} \
        vault \
        vault operator unseal $UNSEAL_KEY
fi 
