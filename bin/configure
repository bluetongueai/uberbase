#!/bin/bash

export UBERBASE_PLATFORM="`arch | sed s/arm64/aarch64/ | sed s/amd64/x86_64/`"

echo "Configuring Uberbase for ${UBERBASE_PLATFORM}..."

# Function to interpolate template files
interpolate_template() {
    local template_file=$1
    local output_file=$2
    local source_file
    local user_config_file="./configs${output_file#./_configs}"

    # Determine which file to use as source
    if [ -f "$user_config_file" ]; then
        source_file="$user_config_file"
    else
        source_file="$template_file"
    fi
    
    # Create a temporary file for the new content
    local temp_file=$(mktemp)
    
    if [ -f ./.env ]; then
        source ./.env && envsubst < "$source_file" > "$temp_file"
    else
        envsubst < "$source_file" > "$temp_file"
    fi

    # Only update if content has changed
    if ! cmp -s "$temp_file" "$output_file"; then
        mv "$temp_file" "$output_file"
    else
        rm "$temp_file"
    fi
}

# Smoosh our base postgres init data script
# in with the user's provided init data
# pray for no conflicts
echo "Setting up postgres init.d scripts..."
mkdir -p postgres/init
cp postgres/_init/* postgres/init/.

# Delete the previously configured configs and start fresh
echo "Cleaning up previously configured configs..."
rm -Rf ./_configs
mkdir -p ./_configs/traefik
mkdir -p ./_configs/functions
mkdir -p ./_configs/postgrest
mkdir -p ./_configs/vault

# Place templates interpolated with env vars into the _configs directory, or
# use the user's provided configs if they exist
echo "Setting up vault config..."
interpolate_template "./vault/local.json.template" "./_configs/vault/local.json"
echo "Setting up traefik config..."
interpolate_template "./traefik/traefik.template.yml" "./_configs/traefik/traefik.yml"
echo "Setting up functions config..."
interpolate_template "./functions/config.template.json" "./_configs/functions/config.json"
echo "Setting up postgrest config..."
interpolate_template "./postgrest/postgrest.template.conf" "./_configs/postgrest/postgrest.conf"
