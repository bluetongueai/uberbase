#!/bin/bash

export UBERBASE_PLATFORM="`arch | sed s/arm64/aarch64/ | sed s/amd64/x86_64/`"

echo -n "Configuring Uberbase for ${UBERBASE_PLATFORM}..."

# Function to interpolate template files
interpolate_template() {
    local template_file=$1
    local output_file=$2
    local source_file
    local user_config_file="./configs${output_file#./_configs}"

    # Determine which file to use as source
    if [ -f "$user_config_file" ]; then
        source_file="$user_config_file"
    else
        source_file="$template_file"
    fi
    
    # Create a temporary file for the new content
    local temp_file=$(mktemp)
    
    if [ -f ./.env ]; then
        source ./.env && envsubst < "$source_file" > "$temp_file"
    else
        envsubst < "$source_file" > "$temp_file"
    fi

    # Only update if content has changed
    if ! cmp -s "$temp_file" "$output_file"; then
        mv "$temp_file" "$output_file"
    else
        rm "$temp_file"
    fi
}

# Create certificates
if [ ! -f "./data/certs/ca.pem" ]; then
    ./bin/certificates
fi

# Smoosh our base postgres init data script
# in with the user's provided init data
# pray for no conflicts
rm -Rf $UBERBASE_POSTGRES_STORAGE/init.d
mkdir -p $UBERBASE_POSTGRES_STORAGE/init.d
cp postgres/_init/* $UBERBASE_POSTGRES_STORAGE/init.d/.
if [ -d "postgres/init" ]; then
    cp postgres/init/* $UBERBASE_POSTGRES_STORAGE/init.d/.
fi

# Delete the previously configured configs and start fresh
rm -Rf ./_configs/*
mkdir -p ./_configs/traefik/static
mkdir -p ./_configs/traefik/dynamic
mkdir -p ./_configs/functions
mkdir -p ./_configs/postgrest
mkdir -p ./_configs/vault
mkdir -p ./_configs/registry
mkdir -p ./_configs/fusionauth/config
mkdir -p ./_configs/fusionauth/kickstart

# Place templates interpolated with env vars into the _configs directory, or
# use the user's provided configs if they exist
interpolate_template "./traefik/static/traefik.template.yml" "./_configs/traefik/static/traefik.yml"
interpolate_template "./traefik/dynamic/uberbase.template.yml" "./_configs/traefik/dynamic/uberbase.yml"
interpolate_template "./functions/config.template.json" "./_configs/functions/config.json"
interpolate_template "./postgrest/postgrest.template.conf" "./_configs/postgrest/postgrest.conf"
interpolate_template "./vault/vault-server.template.hcl" "./_configs/vault/vault-server.hcl"
interpolate_template "./fusionauth/config/fusionauth.properties" "./_configs/fusionauth/config/fusionauth.properties"
cp -r ./fusionauth/kickstart ./_configs/fusionauth

chmod -R 777 ./_configs

# Create the registry password file
echo "${UBERBASE_REGISTRY_USERNAME}:${UBERBASE_REGISTRY_PASSWORD}" > ./_configs/registry/registry.password

echo -e " \033[1;32mdone.\033[0m"
