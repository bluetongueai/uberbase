{
  debug
  # acme_ca https://acme-staging-v02.api.letsencrypt.org/directory
  log {
		output file /var/log/caddy.log
	}
}

(cors) {
  @cors_preflight{args.0} method OPTIONS
  @cors{args.0} header Origin {args.0}

  handle @cors_preflight{args.0} {
    header {
      Access-Control-Allow-Origin "{args.0}"
      Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS"
      Access-Control-Allow-Headers *
      Access-Control-Max-Age "3600"
      defer   #turn on defer on your header directive to make sure the new header values are set after proxying
    }
    respond "" 204
  }

  handle @cors{args.0} {
    header {
      Access-Control-Allow-Origin "{args.0}"
      Access-Control-Expose-Headers *
      defer
    }
  }
}

auth.${UBERBASE_DOMAIN} {
  import cors auth.${UBERBASE_DOMAIN}
  reverse_proxy localhost:${UBERBASE_LOGTO_PORT}
}

# optional - expose your postgres instance (not recommended in production)
postgres.${UBERBASE_DOMAIN} {
  import cors postgres.${UBERBASE_DOMAIN}
  reverse_proxy localhost:${UBERBASE_POSTGRES_PORT}
}

# optional - expose your redis instance
redis.${UBERBASE_DOMAIN} {
  import cors redis.${UBERBASE_DOMAIN}
  reverse_proxy localhost:${UBERBASE_REDIS_PORT}
}

# optional - expose your minio instance
minio.${UBERBASE_DOMAIN} {
  import cors minio.${UBERBASE_DOMAIN}
  reverse_proxy localhost:${UBERBASE_MINIO_PORT}
}

${UBERBASE_DOMAIN} {
  import cors ${UBERBASE_DOMAIN}

  handle /api/v1/functions {
    reverse_proxy localhost:${UBERBASE_FUNCTIONS_PORT}
  }

  handle /api/v1 {
    reverse_proxy localhost:${UBERBASE_POSTGREST_PORT}
  }
}
