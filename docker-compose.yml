name: uberbase

networks:
  net:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
  minio_data:


services:

  redis:
    image: redis/redis-stack:latest
    container_name: redis
    hostname: redis
    user: "0"
    volumes:
      - ${UBERBASE_REDIS_STORAGE}:/data:Z
      - ${PWD}/logs:/var/log/redis:Z
    ports:
      - ${UBERBASE_REDIS_PORT}:6379
    restart: unless-stopped
    # entrypoint: redis-server --requirepass ${UBERBASE_REDIS_SECRET} --logfile /var/log/redis/redis.log --loglevel verbose
    env_file:
      - .env
    networks:
      - net

  postgres:
    image: postgres:16.2
    container_name: postgres
    hostname: postgres
    user: "999"
    environment:
      POSTGRES_USER: ${UBERBASE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${UBERBASE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${UBERBASE_POSTGRES_DATABASE}
    env_file:
      - .env
    ports:
      - ${UBERBASE_POSTGRES_PORT}:5432
    # entrypoint: postgres -c logging_collector=on -c log_directory=/var/log/postgres -c log_statement=all -c log_filename=postgresql.log
    volumes:
      - ${UBERBASE_POSTGRES_STORAGE}:/var/lib/postgresql/data:Z
      - ${PWD}/postgres/init:/docker-entrypoint-initdb.d
      - ${PWD}/logs:/var/log/postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${UBERBASE_POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - net

  minio:
    image: quay.io/minio/minio
    container_name: minio
    hostname: minio
    user: "0"
    command: server /data --console-address ":9001"
    volumes:
      - ${UBERBASE_MINIO_STORAGE}:/data:Z
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: ${UBERBASE_MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${UBERBASE_MINIO_ROOT_PASSWORD}
    ports:
      - ${UBERBASE_MINIO_PORT}:9000
      - ${UBERBASE_MINIO_CONSOLE_PORT}:9001
    networks:
      - net

  caddy:
    image: caddy:2.8.4
    container_name: caddy
    hostname: caddy
    ports:
      - ${UBERBASE_HTTP_PORT}:80
      - ${UBERBASE_HTTPS_PORT}:443
    volumes:
      - ${PWD}/configs/caddy/Caddyfile:/etc/caddy/Caddyfile
      - ${PWD}/logs:/var/log/caddy
    depends_on:
      - zitadel
    env_file:
      - .env
    networks:
      - net
  
  zitadel:
    image: ghcr.io/zitadel/zitadel:latest
    hostname: zitadel
    command: start-from-init --masterkey ${UBERBASE_ZITADEL_MASTERKEY} --tlsMode disabled
    environment:
      ZITADEL_DATABASE_POSTGRES_HOST: ${UBERBASE_POSTGRES_HOST}
      ZITADEL_DATABASE_POSTGRES_PORT: ${UBERBASE_POSTGRES_PORT}
      ZITADEL_DATABASE_POSTGRES_DATABASE: ${UBERBASE_ZITADEL_DATABASE}
      ZITADEL_DATABASE_POSTGRES_USER_USERNAME: zitadel
      ZITADEL_DATABASE_POSTGRES_USER_PASSWORD: ${UBERBASE_POSTGRES_PASSWORD}
      ZITADEL_DATABASE_POSTGRES_USER_SSL_MODE: disable
      ZITADEL_DATABASE_POSTGRES_ADMIN_USERNAME: ${UBERBASE_POSTGRES_USER}
      ZITADEL_DATABASE_POSTGRES_ADMIN_PASSWORD: ${UBERBASE_POSTGRES_PASSWORD}
      ZITADEL_DATABASE_POSTGRES_ADMIN_SSL_MODE: disable
      ZITADEL_EXTERNALDOMAIN: ${UBERBASE_DOMAIN}
      ZITADEL_EXTERNALSECURE: false
    depends_on:
      postgres:
        condition: 'service_healthy'
    ports:
      - ${UBERBASE_ZITADEL_PORT}:8080
    networks:
      - net

  postgrest:
    image: bluetongueai/postgrest:latest
    container_name: postgrest
    hostname: postgrest
    build:
      context: ./postgrest
      args:
        - POSTGREST_VERSION=${UBERBASE_POSTGREST_VERSION}
    env_file:
      - .env
    volumes:
      - ${PWD}/configs/postgrest/postgrest.conf:/etc/postgrest.conf
      - ${PWD}/logs:/var/log/postgrest
    ports:
      - ${UBERBASE_POSTGREST_PORT}:3000
    depends_on:
      - postgres
    networks:
      - net
