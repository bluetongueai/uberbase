name: uberbase

volumes:
  redis_data:
  postgres_data:
  minio_data:

networks:
  net:
    driver: bridge

services:
  redis:
    restart: unless-stopped
    image: docker.io/redis/redis-stack:latest
    container_name: redis
    user: "0"
    volumes:
      - ${UBERBASE_REDIS_STORAGE}:/data:Z
      - ${PWD}/logs:/var/log/redis:Z
    ports:
      - ${UBERBASE_REDIS_PORT}:6379
    #environment:
    #  REDIS_ARGS: "--logfile /var/log/redis/redis.log --loglevel verbose"
    networks:
      - net

  postgres:
    restart: unless-stopped
    image: docker.io/library/postgres:16.2
    container_name: postgres
    environment:
      POSTGRES_USER: ${UBERBASE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${UBERBASE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${UBERBASE_POSTGRES_DATABASE}
    ports:
      - ${UBERBASE_POSTGRES_PORT}:5432
    command: -c config_file=/etc/postgresql/postgresql.conf
    volumes:
      - ${PWD}/logs:/var/log/postgresql
      - ${PWD}/configs/postgres/init:/docker-entrypoint-initdb.d
      - ${PWD}/postgres/conf:/etc/postgresql/
      - ${UBERBASE_POSTGRES_STORAGE}:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${UBERBASE_POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - net

  minio:
    restart: unless-stopped
    image: quay.io/minio/minio:latest
    container_name: minio
    user: "0"
    command: server /data --console-address ":9001"
    volumes:
      - ${UBERBASE_MINIO_STORAGE}:/data:Z
    environment:
      MINIO_ROOT_USER: ${UBERBASE_MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${UBERBASE_MINIO_ROOT_PASSWORD}
    ports:
      - ${UBERBASE_MINIO_PORT}:9000
      - ${UBERBASE_MINIO_CONSOLE_PORT}:9001
    networks:
      - net

  logto:
    restart: unless-stopped
    image: docker.io/svhd/logto:latest
    container_name: logto
    # entrypoint: ["sh", "-c", "npm run cli db seed -- --swe && npm start 2>&1 > /var/log/logto/logto.log"]
    environment:
      - TRUST_PROXY_HEADER=1
      - NODE_ENV=production
      - DB_URL=postgres://${UBERBASE_POSTGRES_USER}:${UBERBASE_POSTGRES_PASSWORD}@${UBERBASE_POSTGRES_HOST}:${UBERBASE_POSTGRES_PORT}/${UBERBASE_LOGTO_DATABASE}
      - PUBLIC_PORT=${UBERBASE_LOGTO_PUBLIC_PORT}
      - ADMIN_PORT=${UBERBASE_LOGTO_ADMIN_PORT}
      - ENDPOINT=${UBERBASE_LOGTO_ENDPOINT}
      - ADMIN_ENDPOINT=${UBERBASE_LOGTO_ADMIN_ENDPOINT}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ${PWD}/logs:/var/log/logto
    ports:
      - ${UBERBASE_LOGTO_PUBLIC_PORT}:3001
      - ${UBERBASE_LOGTO_ADMIN_PORT}:3002
    networks:
      - net
 
  postgrest:
    restart: unless-stopped
    image: docker.io/bluetongueai/postgrest:latest
    container_name: postgrest
    build:
      context: ./postgrest
      args:
        - POSTGREST_VERSION=${UBERBASE_POSTGREST_VERSION}
    environment:
      - UBERBASE_POSTGRES_USER=${UBERBASE_POSTGRES_USER}
      - UBERBASE_POSTGRES_PASSWORD=${UBERBASE_POSTGRES_PASSWORD}
      - UBERBASE_POSTGRES_HOST=${UBERBASE_POSTGRES_HOST}
      - UBERBASE_POSTGRES_DATABASE=${UBERBASE_POSTGRES_DATABASE}
      - UBERBASE_POSTGREST_JWT_SECRET=${UBERBASE_POSTGREST_JWT_SECRET}
      - UBERBASE_POSTGREST_PORT=${UBERBASE_POSTGREST_PORT}
    volumes:
      - ${PWD}/configs/postgrest/postgrest.conf:/etc/postgrest.conf
      - ${PWD}/logs:/var/log/postgrest
    ports:
      - ${UBERBASE_POSTGREST_PORT}:3000
    #depends_on:
    #  postgres:
    #    condition: service_healthy
    networks:
      - net
