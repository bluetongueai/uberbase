name: uberbase

volumes:
  redis_data:
  postgres_data:
  minio_data:
  fusionauth_data:
  traefik_data:
  vault_data:

networks:
  net:
    driver: bridge

services:
  vault:
    image: hashicorp/vault:latest
    container_name: vault
    restart: unless-stopped
    cap_add:
      - IPC_LOCK
    command: server
    environment:
      VAULT_ADDR: "http://0.0.0.0:8200"
      VAULT_API_ADDR: "http://0.0.0.0:8200"
    volumes:
      - ${UBERBASE_VAULT_STORAGE}:/vault/file:Z
      - ${PWD}/vault:/vault/config:Z
      - ${PWD}/logs:/vault/logs:Z
    ports:
      - ${UBERBASE_VAULT_PORT}:8200
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - net
    extra_hosts:
      - uberbase:host-gateway

  redis:
    restart: unless-stopped
    image: docker.io/redis/redis-stack:latest
    build:
      context: ./redis
    container_name: redis
    user: "0"
    volumes:
      - ${UBERBASE_REDIS_STORAGE}:/data:Z
      - ${PWD}/logs:/var/log/redis:Z
    ports:
      - ${UBERBASE_REDIS_PORT}:6379
    environment:
      VAULT_ADDR: "http://vault:8200"
      REDIS_ARGS: "--logfile /var/log/redis/redis.log --loglevel verbose"
    networks:
      - net
    extra_hosts:
      - uberbase:host-gateway
    env_file:
      - ./vault/credentials
    depends_on:
      vault:
        condition: service_healthy

  postgres:
    restart: unless-stopped
    image: docker.io/bluetongueai/postgres:latest
    build:
      context: ./postgres/image
    container_name: postgres
    env_file:
      - ./vault/credentials
    environment:
      VAULT_ADDR: "http://vault:8200"
      POSTGRES_USER: ${UBERBASE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${UBERBASE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${UBERBASE_POSTGRES_DATABASE}
    ports:
      - ${UBERBASE_POSTGRES_PORT}:5432
    volumes:
      - ${PWD}/logs:/var/log/postgresql
      - ${PWD}/postgres/init:/docker-entrypoint-initdb.d
      - ${PWD}/postgres/conf:/etc/postgresql/
      - ${UBERBASE_POSTGRES_STORAGE}:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${UBERBASE_POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - net
    extra_hosts:
      - uberbase:host-gateway
    depends_on:
      vault:
        condition: service_healthy

  minio:
    restart: unless-stopped
    image: quay.io/minio/minio:latest
    build:
      context: ./minio
    container_name: minio
    user: "0"
    command: server /data --console-address ":9001"
    volumes:
      - ${UBERBASE_MINIO_STORAGE}:/data:Z
    environment:
      VAULT_ADDR: "http://vault:8200"
      MINIO_ROOT_USER: ${UBERBASE_MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${UBERBASE_MINIO_ROOT_PASSWORD}
    ports:
      - ${UBERBASE_MINIO_PORT}:9000
      - ${UBERBASE_MINIO_CONSOLE_PORT}:9001
    networks:
      - net
    extra_hosts:
      - uberbase:host-gateway
    env_file:
      - ./vault/credentials
    depends_on:
      vault:
        condition: service_healthy

  postgrest:
    restart: unless-stopped
    image: docker.io/bluetongueai/postgrest:latest
    container_name: postgrest
    build:
      context: ./postgrest
      args:
        - POSTGREST_VERSION=${UBERBASE_POSTGREST_VERSION}
    environment:
      VAULT_ADDR: "http://vault:8200"
      UBERBASE_POSTGRES_USER: ${UBERBASE_POSTGRES_USER}
      UBERBASE_POSTGRES_PASSWORD: ${UBERBASE_POSTGRES_PASSWORD}
      UBERBASE_POSTGRES_HOST: ${UBERBASE_POSTGRES_HOST}
      UBERBASE_POSTGRES_DATABASE: ${UBERBASE_POSTGRES_DATABASE}
      UBERBASE_POSTGREST_JWT_SECRET: ${UBERBASE_POSTGREST_JWT_SECRET}
      UBERBASE_POSTGREST_PORT: ${UBERBASE_POSTGREST_PORT}
    volumes:
      - ${PWD}/_configs/postgrest/postgrest.conf:/etc/postgrest.conf
      - ${PWD}/logs:/var/log/postgrest
    ports:
      - ${UBERBASE_POSTGREST_PORT}:3000
    healthcheck:
      test: curl --silent --fail http://postgrest:3001/metrics -o /dev/null -w "%{http_code}"
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      vault:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - net
    extra_hosts:
      - uberbase:host-gateway
    env_file:
      - ./vault/credentials

  fusionauth:
    image:  docker.io/fusionauth/fusionauth-app:latest
    container_name: fusionauth
    user: root
    build:
      context: ./fusionauth
    env_file:
      - ./vault/credentials
    environment:
      VAULT_ADDR: "http://vault:8200"
      DATABASE_URL: jdbc:postgresql://${UBERBASE_POSTGRES_HOST}:${UBERBASE_POSTGRES_PORT}/${UBERBASE_FUSIONAUTH_DATABASE}
      DATABASE_ROOT_USERNAME: ${UBERBASE_POSTGRES_USER}
      DATABASE_ROOT_PASSWORD: ${UBERBASE_POSTGRES_PASSWORD}
      DATABASE_USERNAME: ${UBERBASE_POSTGRES_USER}
      DATABASE_PASSWORD: ${UBERBASE_POSTGRES_PASSWORD}
      FUSIONAUTH_APP_RUNTIME_MODE: ${UBERBASE_FUSIONAUTH_APP_RUNTIME_MODE}
      FUSIONAUTH_APP_MEMORY: ${UBERBASE_FUSIONAUTH_APP_MEMORY}
      FUSIONAUTH_APP_URL: ${UBERBASE_FUSIONAUTH_APP_URL} 
      FUSIONAUTH_APP_KICKSTART_FILE: /usr/local/fusionauth/kickstart/kickstart.json
    healthcheck:
      test: curl --silent --fail http://fusionauth:9011/api/status -o /dev/null -w "%{http_code}"
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - fusionauth_data:/usr/local/fusionauth/config
      - ./_configs/fusionauth:/usr/local/fusionauth/kickstart
      - ${PWD}/logs:/usr/local/fusionauth/logs
    depends_on:
      vault:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - ${UBERBASE_FUSIONAUTH_PORT}:9011
    networks:
      - net
    extra_hosts:
      - uberbase:host-gateway

  traefik:
    image: docker.io/traefik:v3.3
    build:
      context: ./traefik
    container_name: traefik
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=postmaster@example.com"
      - "--certificatesresolvers.myresolver.acme.storage=/data/letsencrypt/acme.json"
    ports:
      - 80:80
      - 443:443
    networks:
      - net
    extra_hosts:
      - uberbase:host-gateway
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${PWD}/_configs/traefik:/etc/traefik
      - ${PWD}/logs:/var/log/traefik
      - traefik_data:/data
    env_file:
      - ./vault/credentials
    environment:
      VAULT_ADDR: "http://vault:8200"
    depends_on:
      vault:
        condition: service_healthy
